// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use crate::api::blue::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = DcoCodec,
    default_rust_opaque = RustOpaqueNom,
    default_rust_auto_opaque = RustAutoOpaqueNom,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.11.1";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 757854830;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__blue__BPeripheral_connect_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BPeripheral>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BPeripheral_connect",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, ()>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::blue::BPeripheral::connect(&*api_that_guard).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__blue__BPeripheral_disconnect_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BPeripheral>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BPeripheral_disconnect",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, ()>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::blue::BPeripheral::disconnect(&*api_that_guard).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__blue__BPeripheral_write_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BPeripheral>>,
    >,
    characteristic: impl CstDecode<crate::api::blue::BCharacteristic>,
    data: impl CstDecode<Vec<u8>>,
    write_type: impl CstDecode<crate::api::blue::BWriteType>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BPeripheral_write",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_characteristic = characteristic.cst_decode();
            let api_data = data.cst_decode();
            let api_write_type = write_type.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, ()>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::blue::BPeripheral::write(
                                &*api_that_guard,
                                api_characteristic,
                                api_data,
                                api_write_type,
                            )
                            .await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__blue__BlueAdapter_listen_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlueAdapter>>,
    >,
    data: impl CstDecode<
        StreamSink<crate::api::blue::BlueEvent, flutter_rust_bridge::for_generated::DcoCodec>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BlueAdapter_listen",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_data = data.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, ()>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::blue::BlueAdapter::listen(&*api_that_guard, api_data).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__blue__BlueAdapter_stop_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlueAdapter>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BlueAdapter_stop",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco::<_, _, ()>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::blue::BlueAdapter::stop(&*api_that_guard).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__blue__adapters_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "adapters",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| async move {
                transform_result_dco::<_, _, String>(
                    (move || async move {
                        let output_ok = crate::api::blue::adapters().await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__log__create_log_stream_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    s: impl CstDecode<
        StreamSink<crate::api::log::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_log_stream",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_s = s.cst_decode();
            move |context| {
                transform_result_dco::<_, _, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::log::create_log_stream(api_s)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__blue__default_adapter_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "default_adapter",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| async move {
                transform_result_dco::<_, _, String>(
                    (move || async move {
                        let output_ok = crate::api::blue::default_adapter().await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__blue__device_peripheral_id_infos_to_string_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::blue::DevicePeripheralId>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "device_peripheral_id_infos_to_string",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::blue::DevicePeripheralId::infos_to_string(&api_that),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__log__init_logger_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_logger",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::log::init_logger();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__log__my_mobile_logger_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "my_mobile_logger_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::log::MyMobileLogger::new())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__log__rust_set_up_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_set_up",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::log::rust_set_up();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__log__send_to_dart_logger_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "send_to_dart_logger_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::log::SendToDartLogger::new())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__log__send_to_dart_logger_set_stream_sink_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    stream_sink: impl CstDecode<
        StreamSink<crate::api::log::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "send_to_dart_logger_set_stream_sink",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_stream_sink = stream_sink.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::log::SendToDartLogger::set_stream_sink(api_stream_sink);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}

// Section: dart2rust

impl CstDecode<crate::api::blue::BCentralState> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::blue::BCentralState {
        match self {
            0 => crate::api::blue::BCentralState::Unknown,
            1 => crate::api::blue::BCentralState::PoweredOn,
            2 => crate::api::blue::BCentralState::PoweredOff,
            _ => unreachable!("Invalid variant for BCentralState: {}", self),
        }
    }
}
impl CstDecode<crate::api::blue::BWriteType> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::blue::BWriteType {
        match self {
            0 => crate::api::blue::BWriteType::WithResponse,
            1 => crate::api::blue::BWriteType::WithoutResponse,
            _ => unreachable!("Invalid variant for BWriteType: {}", self),
        }
    }
}
impl CstDecode<bool> for bool {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> bool {
        self
    }
}
impl CstDecode<i16> for i16 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i16 {
        self
    }
}
impl CstDecode<i32> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i32 {
        self
    }
}
impl CstDecode<i64> for i64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i64 {
        self
    }
}
impl CstDecode<u16> for u16 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u16 {
        self
    }
}
impl CstDecode<u8> for u8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u8 {
        self
    }
}
impl CstDecode<usize> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> usize {
        self
    }
}
impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for RustAutoOpaqueNom<BPeripheral> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BPeripheral>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);
    }
}

impl SseDecode for BPeripheral {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BPeripheral>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for BlueAdapter {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlueAdapter>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for std::collections::HashMap<uuid::Uuid, Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(uuid::Uuid, Vec<u8>)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<u16, Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(u16, Vec<u8>)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BPeripheral>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlueAdapter>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for StreamSink<crate::api::blue::BlueEvent, flutter_rust_bridge::for_generated::DcoCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode
    for StreamSink<crate::api::log::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for uuid::Uuid {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
    }
}

impl SseDecode for crate::api::blue::BCentralState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::blue::BCentralState::Unknown,
            1 => crate::api::blue::BCentralState::PoweredOn,
            2 => crate::api::blue::BCentralState::PoweredOff,
            _ => unreachable!("Invalid variant for BCentralState: {}", inner),
        };
    }
}

impl SseDecode for crate::api::blue::BCharacteristic {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_uuid = <uuid::Uuid>::sse_decode(deserializer);
        let mut var_serviceUuid = <uuid::Uuid>::sse_decode(deserializer);
        return crate::api::blue::BCharacteristic {
            uuid: var_uuid,
            service_uuid: var_serviceUuid,
        };
    }
}

impl SseDecode for crate::api::blue::BWriteType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::blue::BWriteType::WithResponse,
            1 => crate::api::blue::BWriteType::WithoutResponse,
            _ => unreachable!("Invalid variant for BWriteType: {}", inner),
        };
    }
}

impl SseDecode for crate::api::blue::BlueEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 =
                    <crate::api::blue::DevicePeripheralId>::sse_decode(deserializer);
                return crate::api::blue::BlueEvent::DeviceDiscovered(var_field0);
            }
            1 => {
                let mut var_field0 =
                    <crate::api::blue::DevicePeripheralId>::sse_decode(deserializer);
                return crate::api::blue::BlueEvent::DeviceUpdated(var_field0);
            }
            2 => {
                let mut var_field0 =
                    <crate::api::blue::DevicePeripheralId>::sse_decode(deserializer);
                return crate::api::blue::BlueEvent::DeviceConnected(var_field0);
            }
            3 => {
                let mut var_field0 =
                    <crate::api::blue::DevicePeripheralId>::sse_decode(deserializer);
                return crate::api::blue::BlueEvent::DeviceDisconnected(var_field0);
            }
            4 => {
                let mut var_field0 =
                    <crate::api::blue::DevicePeripheralId>::sse_decode(deserializer);
                let mut var_field1 =
                    <std::collections::HashMap<u16, Vec<u8>>>::sse_decode(deserializer);
                return crate::api::blue::BlueEvent::ManufacturerDataAdvertisement(
                    var_field0, var_field1,
                );
            }
            5 => {
                let mut var_field0 =
                    <crate::api::blue::DevicePeripheralId>::sse_decode(deserializer);
                let mut var_field1 =
                    <std::collections::HashMap<uuid::Uuid, Vec<u8>>>::sse_decode(deserializer);
                return crate::api::blue::BlueEvent::ServiceDataAdvertisement(
                    var_field0, var_field1,
                );
            }
            6 => {
                let mut var_field0 =
                    <crate::api::blue::DevicePeripheralId>::sse_decode(deserializer);
                let mut var_field1 = <Vec<uuid::Uuid>>::sse_decode(deserializer);
                return crate::api::blue::BlueEvent::ServicesAdvertisement(var_field0, var_field1);
            }
            7 => {
                let mut var_field0 = <crate::api::blue::BCentralState>::sse_decode(deserializer);
                return crate::api::blue::BlueEvent::StateUpdate(var_field0);
            }
            8 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::blue::BlueEvent::ERROR(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::blue::DevicePeripheralId {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <Option<String>>::sse_decode(deserializer);
        let mut var_isConnected = <bool>::sse_decode(deserializer);
        let mut var_address = <String>::sse_decode(deserializer);
        let mut var_txPowerLevel = <Option<i16>>::sse_decode(deserializer);
        let mut var_rssi = <Option<i16>>::sse_decode(deserializer);
        let mut var_manufacturerData =
            <std::collections::HashMap<u16, Vec<u8>>>::sse_decode(deserializer);
        let mut var_serviceData =
            <std::collections::HashMap<uuid::Uuid, Vec<u8>>>::sse_decode(deserializer);
        let mut var_services = <Vec<uuid::Uuid>>::sse_decode(deserializer);
        let mut var_peripheral = <RustAutoOpaqueNom<BPeripheral>>::sse_decode(deserializer);
        return crate::api::blue::DevicePeripheralId {
            name: var_name,
            is_connected: var_isConnected,
            address: var_address,
            tx_power_level: var_txPowerLevel,
            rssi: var_rssi,
            manufacturer_data: var_manufacturerData,
            service_data: var_serviceData,
            services: var_services,
            peripheral: var_peripheral,
        };
    }
}

impl SseDecode for i16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i16::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<BlueAdapter> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<BlueAdapter>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<uuid::Uuid> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<uuid::Uuid>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(u16, Vec<u8>)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(u16, Vec<u8>)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(uuid::Uuid, Vec<u8>)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(uuid::Uuid, Vec<u8>)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::api::log::LogEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_timeMillis = <i64>::sse_decode(deserializer);
        let mut var_level = <i32>::sse_decode(deserializer);
        let mut var_tag = <String>::sse_decode(deserializer);
        let mut var_msg = <String>::sse_decode(deserializer);
        return crate::api::log::LogEntry {
            time_millis: var_timeMillis,
            level: var_level,
            tag: var_tag,
            msg: var_msg,
        };
    }
}

impl SseDecode for crate::api::log::MyMobileLogger {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return crate::api::log::MyMobileLogger {};
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i16> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<i16>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for (u16, Vec<u8>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <u16>::sse_decode(deserializer);
        let mut var_field1 = <Vec<u8>>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (uuid::Uuid, Vec<u8>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <uuid::Uuid>::sse_decode(deserializer);
        let mut var_field1 = <Vec<u8>>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for crate::api::log::SendToDartLogger {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return crate::api::log::SendToDartLogger {};
    }
}

impl SseDecode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u16::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<BPeripheral> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<BPeripheral> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<BPeripheral>> for BPeripheral {
    fn into_into_dart(self) -> FrbWrapper<BPeripheral> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<BlueAdapter> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<BlueAdapter> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<BlueAdapter>> for BlueAdapter {
    fn into_into_dart(self) -> FrbWrapper<BlueAdapter> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::blue::BCentralState {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Unknown => 0.into_dart(),
            Self::PoweredOn => 1.into_dart(),
            Self::PoweredOff => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::blue::BCentralState
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::blue::BCentralState>
    for crate::api::blue::BCentralState
{
    fn into_into_dart(self) -> crate::api::blue::BCentralState {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::blue::BCharacteristic {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.uuid.into_into_dart().into_dart(),
            self.service_uuid.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::blue::BCharacteristic
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::blue::BCharacteristic>
    for crate::api::blue::BCharacteristic
{
    fn into_into_dart(self) -> crate::api::blue::BCharacteristic {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::blue::BWriteType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::WithResponse => 0.into_dart(),
            Self::WithoutResponse => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::blue::BWriteType {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::blue::BWriteType>
    for crate::api::blue::BWriteType
{
    fn into_into_dart(self) -> crate::api::blue::BWriteType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::blue::BlueEvent {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::blue::BlueEvent::DeviceDiscovered(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::blue::BlueEvent::DeviceUpdated(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::blue::BlueEvent::DeviceConnected(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::blue::BlueEvent::DeviceDisconnected(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::blue::BlueEvent::ManufacturerDataAdvertisement(field0, field1) => [
                4.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::blue::BlueEvent::ServiceDataAdvertisement(field0, field1) => [
                5.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::blue::BlueEvent::ServicesAdvertisement(field0, field1) => [
                6.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::blue::BlueEvent::StateUpdate(field0) => {
                [7.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::blue::BlueEvent::ERROR(field0) => {
                [8.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::blue::BlueEvent {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::blue::BlueEvent>
    for crate::api::blue::BlueEvent
{
    fn into_into_dart(self) -> crate::api::blue::BlueEvent {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::blue::DevicePeripheralId {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.is_connected.into_into_dart().into_dart(),
            self.address.into_into_dart().into_dart(),
            self.tx_power_level.into_into_dart().into_dart(),
            self.rssi.into_into_dart().into_dart(),
            self.manufacturer_data.into_into_dart().into_dart(),
            self.service_data.into_into_dart().into_dart(),
            self.services.into_into_dart().into_dart(),
            self.peripheral.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::blue::DevicePeripheralId
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::blue::DevicePeripheralId>
    for crate::api::blue::DevicePeripheralId
{
    fn into_into_dart(self) -> crate::api::blue::DevicePeripheralId {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::log::LogEntry {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.time_millis.into_into_dart().into_dart(),
            self.level.into_into_dart().into_dart(),
            self.tag.into_into_dart().into_dart(),
            self.msg.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::log::LogEntry {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::log::LogEntry> for crate::api::log::LogEntry {
    fn into_into_dart(self) -> crate::api::log::LogEntry {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::log::MyMobileLogger {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::log::MyMobileLogger
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::log::MyMobileLogger>
    for crate::api::log::MyMobileLogger
{
    fn into_into_dart(self) -> crate::api::log::MyMobileLogger {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::log::SendToDartLogger {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::log::SendToDartLogger
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::log::SendToDartLogger>
    for crate::api::log::SendToDartLogger
{
    fn into_into_dart(self) -> crate::api::log::SendToDartLogger {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for RustAutoOpaqueNom<BPeripheral> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BPeripheral>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);
    }
}

impl SseEncode for BPeripheral {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BPeripheral>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for BlueAdapter {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlueAdapter>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for std::collections::HashMap<uuid::Uuid, Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(uuid::Uuid, Vec<u8>)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<u16, Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(u16, Vec<u8>)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BPeripheral>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlueAdapter>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for StreamSink<crate::api::blue::BlueEvent, flutter_rust_bridge::for_generated::DcoCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode
    for StreamSink<crate::api::log::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for uuid::Uuid {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
    }
}

impl SseEncode for crate::api::blue::BCentralState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::blue::BCentralState::Unknown => 0,
                crate::api::blue::BCentralState::PoweredOn => 1,
                crate::api::blue::BCentralState::PoweredOff => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::blue::BCharacteristic {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <uuid::Uuid>::sse_encode(self.uuid, serializer);
        <uuid::Uuid>::sse_encode(self.service_uuid, serializer);
    }
}

impl SseEncode for crate::api::blue::BWriteType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::blue::BWriteType::WithResponse => 0,
                crate::api::blue::BWriteType::WithoutResponse => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::blue::BlueEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::blue::BlueEvent::DeviceDiscovered(field0) => {
                <i32>::sse_encode(0, serializer);
                <crate::api::blue::DevicePeripheralId>::sse_encode(field0, serializer);
            }
            crate::api::blue::BlueEvent::DeviceUpdated(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::blue::DevicePeripheralId>::sse_encode(field0, serializer);
            }
            crate::api::blue::BlueEvent::DeviceConnected(field0) => {
                <i32>::sse_encode(2, serializer);
                <crate::api::blue::DevicePeripheralId>::sse_encode(field0, serializer);
            }
            crate::api::blue::BlueEvent::DeviceDisconnected(field0) => {
                <i32>::sse_encode(3, serializer);
                <crate::api::blue::DevicePeripheralId>::sse_encode(field0, serializer);
            }
            crate::api::blue::BlueEvent::ManufacturerDataAdvertisement(field0, field1) => {
                <i32>::sse_encode(4, serializer);
                <crate::api::blue::DevicePeripheralId>::sse_encode(field0, serializer);
                <std::collections::HashMap<u16, Vec<u8>>>::sse_encode(field1, serializer);
            }
            crate::api::blue::BlueEvent::ServiceDataAdvertisement(field0, field1) => {
                <i32>::sse_encode(5, serializer);
                <crate::api::blue::DevicePeripheralId>::sse_encode(field0, serializer);
                <std::collections::HashMap<uuid::Uuid, Vec<u8>>>::sse_encode(field1, serializer);
            }
            crate::api::blue::BlueEvent::ServicesAdvertisement(field0, field1) => {
                <i32>::sse_encode(6, serializer);
                <crate::api::blue::DevicePeripheralId>::sse_encode(field0, serializer);
                <Vec<uuid::Uuid>>::sse_encode(field1, serializer);
            }
            crate::api::blue::BlueEvent::StateUpdate(field0) => {
                <i32>::sse_encode(7, serializer);
                <crate::api::blue::BCentralState>::sse_encode(field0, serializer);
            }
            crate::api::blue::BlueEvent::ERROR(field0) => {
                <i32>::sse_encode(8, serializer);
                <String>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::blue::DevicePeripheralId {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.name, serializer);
        <bool>::sse_encode(self.is_connected, serializer);
        <String>::sse_encode(self.address, serializer);
        <Option<i16>>::sse_encode(self.tx_power_level, serializer);
        <Option<i16>>::sse_encode(self.rssi, serializer);
        <std::collections::HashMap<u16, Vec<u8>>>::sse_encode(self.manufacturer_data, serializer);
        <std::collections::HashMap<uuid::Uuid, Vec<u8>>>::sse_encode(self.service_data, serializer);
        <Vec<uuid::Uuid>>::sse_encode(self.services, serializer);
        <RustAutoOpaqueNom<BPeripheral>>::sse_encode(self.peripheral, serializer);
    }
}

impl SseEncode for i16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i16::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<BlueAdapter> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <BlueAdapter>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<uuid::Uuid> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <uuid::Uuid>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(u16, Vec<u8>)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(u16, Vec<u8>)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(uuid::Uuid, Vec<u8>)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(uuid::Uuid, Vec<u8>)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::api::log::LogEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.time_millis, serializer);
        <i32>::sse_encode(self.level, serializer);
        <String>::sse_encode(self.tag, serializer);
        <String>::sse_encode(self.msg, serializer);
    }
}

impl SseEncode for crate::api::log::MyMobileLogger {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<i16> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <i16>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for (u16, Vec<u8>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u16>::sse_encode(self.0, serializer);
        <Vec<u8>>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (uuid::Uuid, Vec<u8>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <uuid::Uuid>::sse_encode(self.0, serializer);
        <Vec<u8>>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for crate::api::log::SendToDartLogger {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u16::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.11.1.

    // Section: imports

    use super::*;
    use crate::api::blue::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();

    // Section: dart2rust

    impl CstDecode<flutter_rust_bridge::for_generated::anyhow::Error>
        for *mut wire_cst_list_prim_u_8_strict
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> flutter_rust_bridge::for_generated::anyhow::Error {
            unimplemented!()
        }
    }
    impl CstDecode<RustAutoOpaqueNom<BPeripheral>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustAutoOpaqueNom<BPeripheral> {
            flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(self.cst_decode())
        }
    }
    impl CstDecode<BPeripheral> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> BPeripheral {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BPeripheral>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<BlueAdapter> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> BlueAdapter {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlueAdapter>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<std::collections::HashMap<uuid::Uuid, Vec<u8>>>
        for *mut wire_cst_list_record_uuid_list_prim_u_8_strict
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> std::collections::HashMap<uuid::Uuid, Vec<u8>> {
            let vec: Vec<(uuid::Uuid, Vec<u8>)> = self.cst_decode();
            vec.into_iter().collect()
        }
    }
    impl CstDecode<std::collections::HashMap<u16, Vec<u8>>>
        for *mut wire_cst_list_record_u_16_list_prim_u_8_strict
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> std::collections::HashMap<u16, Vec<u8>> {
            let vec: Vec<(u16, Vec<u8>)> = self.cst_decode();
            vec.into_iter().collect()
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BPeripheral>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BPeripheral>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlueAdapter>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlueAdapter>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            StreamSink<crate::api::blue::BlueEvent, flutter_rust_bridge::for_generated::DcoCodec>,
        > for *mut wire_cst_list_prim_u_8_strict
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> StreamSink<crate::api::blue::BlueEvent, flutter_rust_bridge::for_generated::DcoCodec>
        {
            let raw: String = self.cst_decode();
            StreamSink::deserialize(raw)
        }
    }
    impl
        CstDecode<
            StreamSink<crate::api::log::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>,
        > for *mut wire_cst_list_prim_u_8_strict
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> StreamSink<crate::api::log::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>
        {
            let raw: String = self.cst_decode();
            StreamSink::deserialize(raw)
        }
    }
    impl CstDecode<String> for *mut wire_cst_list_prim_u_8_strict {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> String {
            let vec: Vec<u8> = self.cst_decode();
            String::from_utf8(vec).unwrap()
        }
    }
    impl CstDecode<uuid::Uuid> for *mut wire_cst_list_prim_u_8_strict {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> uuid::Uuid {
            let single: Vec<u8> = self.cst_decode();
            flutter_rust_bridge::for_generated::decode_uuid(single)
        }
    }
    impl CstDecode<crate::api::blue::BCharacteristic> for wire_cst_b_characteristic {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::blue::BCharacteristic {
            crate::api::blue::BCharacteristic {
                uuid: self.uuid.cst_decode(),
                service_uuid: self.service_uuid.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::api::blue::BlueEvent> for wire_cst_blue_event {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::blue::BlueEvent {
            match self.tag {
                0 => {
                    let ans = unsafe { self.kind.DeviceDiscovered };
                    crate::api::blue::BlueEvent::DeviceDiscovered(ans.field0.cst_decode())
                }
                1 => {
                    let ans = unsafe { self.kind.DeviceUpdated };
                    crate::api::blue::BlueEvent::DeviceUpdated(ans.field0.cst_decode())
                }
                2 => {
                    let ans = unsafe { self.kind.DeviceConnected };
                    crate::api::blue::BlueEvent::DeviceConnected(ans.field0.cst_decode())
                }
                3 => {
                    let ans = unsafe { self.kind.DeviceDisconnected };
                    crate::api::blue::BlueEvent::DeviceDisconnected(ans.field0.cst_decode())
                }
                4 => {
                    let ans = unsafe { self.kind.ManufacturerDataAdvertisement };
                    crate::api::blue::BlueEvent::ManufacturerDataAdvertisement(
                        ans.field0.cst_decode(),
                        ans.field1.cst_decode(),
                    )
                }
                5 => {
                    let ans = unsafe { self.kind.ServiceDataAdvertisement };
                    crate::api::blue::BlueEvent::ServiceDataAdvertisement(
                        ans.field0.cst_decode(),
                        ans.field1.cst_decode(),
                    )
                }
                6 => {
                    let ans = unsafe { self.kind.ServicesAdvertisement };
                    crate::api::blue::BlueEvent::ServicesAdvertisement(
                        ans.field0.cst_decode(),
                        ans.field1.cst_decode(),
                    )
                }
                7 => {
                    let ans = unsafe { self.kind.StateUpdate };
                    crate::api::blue::BlueEvent::StateUpdate(ans.field0.cst_decode())
                }
                8 => {
                    let ans = unsafe { self.kind.ERROR };
                    crate::api::blue::BlueEvent::ERROR(ans.field0.cst_decode())
                }
                _ => unreachable!(),
            }
        }
    }
    impl CstDecode<crate::api::blue::BCharacteristic> for *mut wire_cst_b_characteristic {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::blue::BCharacteristic {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::api::blue::BCharacteristic>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::api::blue::DevicePeripheralId> for *mut wire_cst_device_peripheral_id {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::blue::DevicePeripheralId {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::api::blue::DevicePeripheralId>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<i16> for *mut i16 {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> i16 {
            unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
        }
    }
    impl CstDecode<crate::api::blue::DevicePeripheralId> for wire_cst_device_peripheral_id {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::blue::DevicePeripheralId {
            crate::api::blue::DevicePeripheralId {
                name: self.name.cst_decode(),
                is_connected: self.is_connected.cst_decode(),
                address: self.address.cst_decode(),
                tx_power_level: self.tx_power_level.cst_decode(),
                rssi: self.rssi.cst_decode(),
                manufacturer_data: self.manufacturer_data.cst_decode(),
                service_data: self.service_data.cst_decode(),
                services: self.services.cst_decode(),
                peripheral: self.peripheral.cst_decode(),
            }
        }
    }
    impl CstDecode<Vec<BlueAdapter>> for *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter {
            // Codec=Cst (C-struct based), see doc to use other codecs
            fn cst_decode(self) -> Vec<BlueAdapter> {
                let vec = unsafe {
        let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
        flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
    };
    vec.into_iter().map(CstDecode::cst_decode).collect()
            }
        }
    impl CstDecode<Vec<uuid::Uuid>> for *mut wire_cst_list_Uuid {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<uuid::Uuid> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_loose {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<u8> {
            unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_strict {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<u8> {
            unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    impl CstDecode<Vec<(u16, Vec<u8>)>> for *mut wire_cst_list_record_u_16_list_prim_u_8_strict {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<(u16, Vec<u8>)> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<(uuid::Uuid, Vec<u8>)>> for *mut wire_cst_list_record_uuid_list_prim_u_8_strict {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<(uuid::Uuid, Vec<u8>)> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<crate::api::log::LogEntry> for wire_cst_log_entry {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::log::LogEntry {
            crate::api::log::LogEntry {
                time_millis: self.time_millis.cst_decode(),
                level: self.level.cst_decode(),
                tag: self.tag.cst_decode(),
                msg: self.msg.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::api::log::MyMobileLogger> for wire_cst_my_mobile_logger {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::log::MyMobileLogger {
            crate::api::log::MyMobileLogger {}
        }
    }
    impl CstDecode<(u16, Vec<u8>)> for wire_cst_record_u_16_list_prim_u_8_strict {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> (u16, Vec<u8>) {
            (self.field0.cst_decode(), self.field1.cst_decode())
        }
    }
    impl CstDecode<(uuid::Uuid, Vec<u8>)> for wire_cst_record_uuid_list_prim_u_8_strict {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> (uuid::Uuid, Vec<u8>) {
            (self.field0.cst_decode(), self.field1.cst_decode())
        }
    }
    impl CstDecode<crate::api::log::SendToDartLogger> for wire_cst_send_to_dart_logger {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::log::SendToDartLogger {
            crate::api::log::SendToDartLogger {}
        }
    }
    impl NewWithNullPtr for wire_cst_b_characteristic {
        fn new_with_null_ptr() -> Self {
            Self {
                uuid: core::ptr::null_mut(),
                service_uuid: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_b_characteristic {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_blue_event {
        fn new_with_null_ptr() -> Self {
            Self {
                tag: -1,
                kind: BlueEventKind { nil__: () },
            }
        }
    }
    impl Default for wire_cst_blue_event {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_device_peripheral_id {
        fn new_with_null_ptr() -> Self {
            Self {
                name: core::ptr::null_mut(),
                is_connected: Default::default(),
                address: core::ptr::null_mut(),
                tx_power_level: core::ptr::null_mut(),
                rssi: core::ptr::null_mut(),
                manufacturer_data: core::ptr::null_mut(),
                service_data: core::ptr::null_mut(),
                services: core::ptr::null_mut(),
                peripheral: Default::default(),
            }
        }
    }
    impl Default for wire_cst_device_peripheral_id {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_log_entry {
        fn new_with_null_ptr() -> Self {
            Self {
                time_millis: Default::default(),
                level: Default::default(),
                tag: core::ptr::null_mut(),
                msg: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_log_entry {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_my_mobile_logger {
        fn new_with_null_ptr() -> Self {
            Self {}
        }
    }
    impl Default for wire_cst_my_mobile_logger {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_record_u_16_list_prim_u_8_strict {
        fn new_with_null_ptr() -> Self {
            Self {
                field0: Default::default(),
                field1: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_record_u_16_list_prim_u_8_strict {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_record_uuid_list_prim_u_8_strict {
        fn new_with_null_ptr() -> Self {
            Self {
                field0: core::ptr::null_mut(),
                field1: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_record_uuid_list_prim_u_8_strict {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_send_to_dart_logger {
        fn new_with_null_ptr() -> Self {
            Self {}
        }
    }
    impl Default for wire_cst_send_to_dart_logger {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_wire__crate__api__blue__BPeripheral_connect(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__blue__BPeripheral_connect_impl(port_, that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_wire__crate__api__blue__BPeripheral_disconnect(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__blue__BPeripheral_disconnect_impl(port_, that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_wire__crate__api__blue__BPeripheral_write(
        port_: i64,
        that: usize,
        characteristic: *mut wire_cst_b_characteristic,
        data: *mut wire_cst_list_prim_u_8_loose,
        write_type: i32,
    ) {
        wire__crate__api__blue__BPeripheral_write_impl(
            port_,
            that,
            characteristic,
            data,
            write_type,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_wire__crate__api__blue__BlueAdapter_listen(
        port_: i64,
        that: usize,
        data: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__blue__BlueAdapter_listen_impl(port_, that, data)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_wire__crate__api__blue__BlueAdapter_stop(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__blue__BlueAdapter_stop_impl(port_, that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_wire__crate__api__blue__adapters(port_: i64) {
        wire__crate__api__blue__adapters_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_wire__crate__api__log__create_log_stream(
        port_: i64,
        s: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__log__create_log_stream_impl(port_, s)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_wire__crate__api__blue__default_adapter(port_: i64) {
        wire__crate__api__blue__default_adapter_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_wire__crate__api__blue__device_peripheral_id_infos_to_string(
        port_: i64,
        that: *mut wire_cst_device_peripheral_id,
    ) {
        wire__crate__api__blue__device_peripheral_id_infos_to_string_impl(port_, that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_wire__crate__api__log__init_logger(port_: i64) {
        wire__crate__api__log__init_logger_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_wire__crate__api__log__my_mobile_logger_new(port_: i64) {
        wire__crate__api__log__my_mobile_logger_new_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_wire__crate__api__log__rust_set_up(port_: i64) {
        wire__crate__api__log__rust_set_up_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_wire__crate__api__log__send_to_dart_logger_new(port_: i64) {
        wire__crate__api__log__send_to_dart_logger_new_impl(port_)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_wire__crate__api__log__send_to_dart_logger_set_stream_sink(
        port_: i64,
        stream_sink: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__log__send_to_dart_logger_set_stream_sink_impl(port_, stream_sink)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BPeripheral>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BPeripheral>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlueAdapter>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlueAdapter>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_cst_new_box_autoadd_b_characteristic(
    ) -> *mut wire_cst_b_characteristic {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_b_characteristic::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_cst_new_box_autoadd_device_peripheral_id(
    ) -> *mut wire_cst_device_peripheral_id {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_device_peripheral_id::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_cst_new_box_autoadd_i_16(value: i16) -> *mut i16 {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_cst_new_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter(len: i32) -> *mut wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter{
        let wrap = wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter { ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len), len };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_cst_new_list_Uuid(len: i32) -> *mut wire_cst_list_Uuid {
        let wrap = wire_cst_list_Uuid {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <*mut wire_cst_list_prim_u_8_strict>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_cst_new_list_prim_u_8_loose(
        len: i32,
    ) -> *mut wire_cst_list_prim_u_8_loose {
        let ans = wire_cst_list_prim_u_8_loose {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_cst_new_list_prim_u_8_strict(
        len: i32,
    ) -> *mut wire_cst_list_prim_u_8_strict {
        let ans = wire_cst_list_prim_u_8_strict {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_cst_new_list_record_u_16_list_prim_u_8_strict(
        len: i32,
    ) -> *mut wire_cst_list_record_u_16_list_prim_u_8_strict {
        let wrap = wire_cst_list_record_u_16_list_prim_u_8_strict {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_record_u_16_list_prim_u_8_strict>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_blue_super_cst_new_list_record_uuid_list_prim_u_8_strict(
        len: i32,
    ) -> *mut wire_cst_list_record_uuid_list_prim_u_8_strict {
        let wrap = wire_cst_list_record_uuid_list_prim_u_8_strict {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_record_uuid_list_prim_u_8_strict>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_b_characteristic {
        uuid: *mut wire_cst_list_prim_u_8_strict,
        service_uuid: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_blue_event {
        tag: i32,
        kind: BlueEventKind,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub union BlueEventKind {
        DeviceDiscovered: wire_cst_BlueEvent_DeviceDiscovered,
        DeviceUpdated: wire_cst_BlueEvent_DeviceUpdated,
        DeviceConnected: wire_cst_BlueEvent_DeviceConnected,
        DeviceDisconnected: wire_cst_BlueEvent_DeviceDisconnected,
        ManufacturerDataAdvertisement: wire_cst_BlueEvent_ManufacturerDataAdvertisement,
        ServiceDataAdvertisement: wire_cst_BlueEvent_ServiceDataAdvertisement,
        ServicesAdvertisement: wire_cst_BlueEvent_ServicesAdvertisement,
        StateUpdate: wire_cst_BlueEvent_StateUpdate,
        ERROR: wire_cst_BlueEvent_ERROR,
        nil__: (),
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_BlueEvent_DeviceDiscovered {
        field0: *mut wire_cst_device_peripheral_id,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_BlueEvent_DeviceUpdated {
        field0: *mut wire_cst_device_peripheral_id,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_BlueEvent_DeviceConnected {
        field0: *mut wire_cst_device_peripheral_id,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_BlueEvent_DeviceDisconnected {
        field0: *mut wire_cst_device_peripheral_id,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_BlueEvent_ManufacturerDataAdvertisement {
        field0: *mut wire_cst_device_peripheral_id,
        field1: *mut wire_cst_list_record_u_16_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_BlueEvent_ServiceDataAdvertisement {
        field0: *mut wire_cst_device_peripheral_id,
        field1: *mut wire_cst_list_record_uuid_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_BlueEvent_ServicesAdvertisement {
        field0: *mut wire_cst_device_peripheral_id,
        field1: *mut wire_cst_list_Uuid,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_BlueEvent_StateUpdate {
        field0: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_BlueEvent_ERROR {
        field0: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_device_peripheral_id {
        name: *mut wire_cst_list_prim_u_8_strict,
        is_connected: bool,
        address: *mut wire_cst_list_prim_u_8_strict,
        tx_power_level: *mut i16,
        rssi: *mut i16,
        manufacturer_data: *mut wire_cst_list_record_u_16_list_prim_u_8_strict,
        service_data: *mut wire_cst_list_record_uuid_list_prim_u_8_strict,
        services: *mut wire_cst_list_Uuid,
        peripheral: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter
    {
        ptr: *mut usize,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_Uuid {
        ptr: *mut *mut wire_cst_list_prim_u_8_strict,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_prim_u_8_loose {
        ptr: *mut u8,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_prim_u_8_strict {
        ptr: *mut u8,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_record_u_16_list_prim_u_8_strict {
        ptr: *mut wire_cst_record_u_16_list_prim_u_8_strict,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_record_uuid_list_prim_u_8_strict {
        ptr: *mut wire_cst_record_uuid_list_prim_u_8_strict,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_log_entry {
        time_millis: i64,
        level: i32,
        tag: *mut wire_cst_list_prim_u_8_strict,
        msg: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_my_mobile_logger {}
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_record_u_16_list_prim_u_8_strict {
        field0: u16,
        field1: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_record_uuid_list_prim_u_8_strict {
        field0: *mut wire_cst_list_prim_u_8_strict,
        field1: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_send_to_dart_logger {}
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.11.1.

    // Section: imports

    use super::*;
    use crate::api::blue::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();

    // Section: dart2rust

    impl CstDecode<flutter_rust_bridge::for_generated::anyhow::Error> for String {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> flutter_rust_bridge::for_generated::anyhow::Error {
            unimplemented!()
        }
    }
    impl
        CstDecode<
            StreamSink<crate::api::blue::BlueEvent, flutter_rust_bridge::for_generated::DcoCodec>,
        > for String
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> StreamSink<crate::api::blue::BlueEvent, flutter_rust_bridge::for_generated::DcoCodec>
        {
            StreamSink::deserialize(self)
        }
    }
    impl
        CstDecode<
            StreamSink<crate::api::log::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>,
        > for String
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> StreamSink<crate::api::log::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>
        {
            StreamSink::deserialize(self)
        }
    }
    impl CstDecode<String> for String {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> String {
            self
        }
    }
    impl CstDecode<uuid::Uuid> for Box<[u8]> {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> uuid::Uuid {
            let single: Vec<u8> = self.cst_decode();
            flutter_rust_bridge::for_generated::decode_uuid(single)
        }
    }
    impl CstDecode<crate::api::blue::BCharacteristic>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::blue::BCharacteristic {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            crate::api::blue::BCharacteristic {
                uuid: self_.get(0).cst_decode(),
                service_uuid: self_.get(1).cst_decode(),
            }
        }
    }
    impl CstDecode<crate::api::blue::BlueEvent>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::blue::BlueEvent {
            let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
            match self_.get(0).unchecked_into_f64() as _ {
                0 => crate::api::blue::BlueEvent::DeviceDiscovered(self_.get(1).cst_decode()),
                1 => crate::api::blue::BlueEvent::DeviceUpdated(self_.get(1).cst_decode()),
                2 => crate::api::blue::BlueEvent::DeviceConnected(self_.get(1).cst_decode()),
                3 => crate::api::blue::BlueEvent::DeviceDisconnected(self_.get(1).cst_decode()),
                4 => crate::api::blue::BlueEvent::ManufacturerDataAdvertisement(
                    self_.get(1).cst_decode(),
                    self_.get(2).cst_decode(),
                ),
                5 => crate::api::blue::BlueEvent::ServiceDataAdvertisement(
                    self_.get(1).cst_decode(),
                    self_.get(2).cst_decode(),
                ),
                6 => crate::api::blue::BlueEvent::ServicesAdvertisement(
                    self_.get(1).cst_decode(),
                    self_.get(2).cst_decode(),
                ),
                7 => crate::api::blue::BlueEvent::StateUpdate(self_.get(1).cst_decode()),
                8 => crate::api::blue::BlueEvent::ERROR(self_.get(1).cst_decode()),
                _ => unreachable!(),
            }
        }
    }
    impl CstDecode<crate::api::blue::DevicePeripheralId>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::blue::DevicePeripheralId {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                9,
                "Expected 9 elements, got {}",
                self_.length()
            );
            crate::api::blue::DevicePeripheralId {
                name: self_.get(0).cst_decode(),
                is_connected: self_.get(1).cst_decode(),
                address: self_.get(2).cst_decode(),
                tx_power_level: self_.get(3).cst_decode(),
                rssi: self_.get(4).cst_decode(),
                manufacturer_data: self_.get(5).cst_decode(),
                service_data: self_.get(6).cst_decode(),
                services: self_.get(7).cst_decode(),
                peripheral: self_.get(8).cst_decode(),
            }
        }
    }
    impl CstDecode<Vec<BlueAdapter>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<BlueAdapter> {
            self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap()
                .iter()
                .map(CstDecode::cst_decode)
                .collect()
        }
    }
    impl CstDecode<Vec<uuid::Uuid>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<uuid::Uuid> {
            self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap()
                .iter()
                .map(CstDecode::cst_decode)
                .collect()
        }
    }
    impl CstDecode<Vec<u8>> for Box<[u8]> {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<u8> {
            self.into_vec()
        }
    }
    impl CstDecode<Vec<(u16, Vec<u8>)>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<(u16, Vec<u8>)> {
            self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap()
                .iter()
                .map(CstDecode::cst_decode)
                .collect()
        }
    }
    impl CstDecode<Vec<(uuid::Uuid, Vec<u8>)>>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<(uuid::Uuid, Vec<u8>)> {
            self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap()
                .iter()
                .map(CstDecode::cst_decode)
                .collect()
        }
    }
    impl CstDecode<crate::api::log::LogEntry>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::log::LogEntry {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                4,
                "Expected 4 elements, got {}",
                self_.length()
            );
            crate::api::log::LogEntry {
                time_millis: self_.get(0).cst_decode(),
                level: self_.get(1).cst_decode(),
                tag: self_.get(2).cst_decode(),
                msg: self_.get(3).cst_decode(),
            }
        }
    }
    impl CstDecode<crate::api::log::MyMobileLogger>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::log::MyMobileLogger {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                0,
                "Expected 0 elements, got {}",
                self_.length()
            );
            crate::api::log::MyMobileLogger {}
        }
    }
    impl CstDecode<Option<String>> for Option<String> {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Option<String> {
            self.map(CstDecode::cst_decode)
        }
    }
    impl CstDecode<(u16, Vec<u8>)> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> (u16, Vec<u8>) {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            (self_.get(0).cst_decode(), self_.get(1).cst_decode())
        }
    }
    impl CstDecode<(uuid::Uuid, Vec<u8>)>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> (uuid::Uuid, Vec<u8>) {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            (self_.get(0).cst_decode(), self_.get(1).cst_decode())
        }
    }
    impl CstDecode<crate::api::log::SendToDartLogger>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::log::SendToDartLogger {
            let self_ = self
                .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
                .unwrap();
            assert_eq!(
                self_.length(),
                0,
                "Expected 0 elements, got {}",
                self_.length()
            );
            crate::api::log::SendToDartLogger {}
        }
    }
    impl CstDecode<flutter_rust_bridge::for_generated::anyhow::Error>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> flutter_rust_bridge::for_generated::anyhow::Error {
            unimplemented!()
        }
    }
    impl CstDecode<RustAutoOpaqueNom<BPeripheral>>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustAutoOpaqueNom<BPeripheral> {
            flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(self.cst_decode())
        }
    }
    impl CstDecode<BPeripheral> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> BPeripheral {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BPeripheral>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<BlueAdapter> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> BlueAdapter {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlueAdapter>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<std::collections::HashMap<uuid::Uuid, Vec<u8>>>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> std::collections::HashMap<uuid::Uuid, Vec<u8>> {
            let vec: Vec<(uuid::Uuid, Vec<u8>)> = self.cst_decode();
            vec.into_iter().collect()
        }
    }
    impl CstDecode<std::collections::HashMap<u16, Vec<u8>>>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> std::collections::HashMap<u16, Vec<u8>> {
            let vec: Vec<(u16, Vec<u8>)> = self.cst_decode();
            vec.into_iter().collect()
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BPeripheral>>,
        > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BPeripheral>>
        {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlueAdapter>>,
        > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlueAdapter>>
        {
            #[cfg(target_pointer_width = "64")]
            {
                compile_error!("64-bit pointers are not supported.");
            }
            unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
        }
    }
    impl
        CstDecode<
            StreamSink<crate::api::blue::BlueEvent, flutter_rust_bridge::for_generated::DcoCodec>,
        > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> StreamSink<crate::api::blue::BlueEvent, flutter_rust_bridge::for_generated::DcoCodec>
        {
            StreamSink::deserialize(self.as_string().expect("should be a string"))
        }
    }
    impl
        CstDecode<
            StreamSink<crate::api::log::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>,
        > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> StreamSink<crate::api::log::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>
        {
            StreamSink::deserialize(self.as_string().expect("should be a string"))
        }
    }
    impl CstDecode<String> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> String {
            self.as_string().expect("non-UTF-8 string, or not a string")
        }
    }
    impl CstDecode<uuid::Uuid> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> uuid::Uuid {
            self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Uint8Array>()
                .to_vec()
                .into_boxed_slice()
                .cst_decode()
        }
    }
    impl CstDecode<crate::api::blue::BCentralState>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::blue::BCentralState {
            (self.unchecked_into_f64() as i32).cst_decode()
        }
    }
    impl CstDecode<crate::api::blue::BWriteType>
        for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::blue::BWriteType {
            (self.unchecked_into_f64() as i32).cst_decode()
        }
    }
    impl CstDecode<bool> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> bool {
            self.is_truthy()
        }
    }
    impl CstDecode<i16> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> i16 {
            self.unchecked_into_f64() as _
        }
    }
    impl CstDecode<i32> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> i32 {
            self.unchecked_into_f64() as _
        }
    }
    impl CstDecode<i64> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> i64 {
            ::std::convert::TryInto::<i64>::try_into(self).unwrap() as _
        }
    }
    impl CstDecode<Vec<u8>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<u8> {
            self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Uint8Array>()
                .to_vec()
                .into()
        }
    }
    impl CstDecode<u16> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> u16 {
            self.unchecked_into_f64() as _
        }
    }
    impl CstDecode<u8> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> u8 {
            self.unchecked_into_f64() as _
        }
    }
    impl CstDecode<usize> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> usize {
            ::std::convert::TryInto::<u64>::try_into(self).unwrap() as _
        }
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__blue__BPeripheral_connect(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__blue__BPeripheral_connect_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__blue__BPeripheral_disconnect(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__blue__BPeripheral_disconnect_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__blue__BPeripheral_write(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        characteristic: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        data: Box<[u8]>,
        write_type: i32,
    ) {
        wire__crate__api__blue__BPeripheral_write_impl(
            port_,
            that,
            characteristic,
            data,
            write_type,
        )
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__blue__BlueAdapter_listen(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
        data: String,
    ) {
        wire__crate__api__blue__BlueAdapter_listen_impl(port_, that, data)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__blue__BlueAdapter_stop(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__blue__BlueAdapter_stop_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__blue__adapters(
        port_: flutter_rust_bridge::for_generated::MessagePort,
    ) {
        wire__crate__api__blue__adapters_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__log__create_log_stream(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        s: String,
    ) {
        wire__crate__api__log__create_log_stream_impl(port_, s)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__blue__default_adapter(
        port_: flutter_rust_bridge::for_generated::MessagePort,
    ) {
        wire__crate__api__blue__default_adapter_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__blue__device_peripheral_id_infos_to_string(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    ) {
        wire__crate__api__blue__device_peripheral_id_infos_to_string_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__log__init_logger(
        port_: flutter_rust_bridge::for_generated::MessagePort,
    ) {
        wire__crate__api__log__init_logger_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__log__my_mobile_logger_new(
        port_: flutter_rust_bridge::for_generated::MessagePort,
    ) {
        wire__crate__api__log__my_mobile_logger_new_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__log__rust_set_up(
        port_: flutter_rust_bridge::for_generated::MessagePort,
    ) {
        wire__crate__api__log__rust_set_up_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__log__send_to_dart_logger_new(
        port_: flutter_rust_bridge::for_generated::MessagePort,
    ) {
        wire__crate__api__log__send_to_dart_logger_new_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire__crate__api__log__send_to_dart_logger_set_stream_sink(
        port_: flutter_rust_bridge::for_generated::MessagePort,
        stream_sink: String,
    ) {
        wire__crate__api__log__send_to_dart_logger_set_stream_sink_impl(port_, stream_sink)
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BPeripheral>>::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BPeripheral>>::decrement_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlueAdapter>>::increment_strong_count(ptr as _);
        }
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlueAdapter>>::decrement_strong_count(ptr as _);
        }
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;
