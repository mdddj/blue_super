// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `record_to_entry`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `SEND_TO_DART_LOGGER_STREAM_SINK`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `as_log`, `as_log`, `config`, `config`, `deref`, `enabled`, `enabled`, `flush`, `flush`, `initialize`, `level`, `level`, `log`, `log`

Stream<LogEntry> createLogStream() =>
    RustLib.instance.api.crateApiLogCreateLogStream();

Future<void> rustSetUp() => RustLib.instance.api.crateApiLogRustSetUp();

Future<void> initLogger() => RustLib.instance.api.crateApiLogInitLogger();

///日志
class LogEntry {
  final PlatformInt64 timeMillis;
  final int level;
  final String tag;
  final String msg;

  const LogEntry({
    required this.timeMillis,
    required this.level,
    required this.tag,
    required this.msg,
  });

  @override
  int get hashCode =>
      timeMillis.hashCode ^ level.hashCode ^ tag.hashCode ^ msg.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is LogEntry &&
          runtimeType == other.runtimeType &&
          timeMillis == other.timeMillis &&
          level == other.level &&
          tag == other.tag &&
          msg == other.msg;
}

class MyMobileLogger {
  const MyMobileLogger();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<MyMobileLogger> newInstance() =>
      RustLib.instance.api.crateApiLogMyMobileLoggerNew();

  @override
  int get hashCode => 0;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is MyMobileLogger && runtimeType == other.runtimeType;
}

class SendToDartLogger {
  const SendToDartLogger();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<SendToDartLogger> newInstance() =>
      RustLib.instance.api.crateApiLogSendToDartLoggerNew();

  static Stream<LogEntry> setStreamSink() =>
      RustLib.instance.api.crateApiLogSendToDartLoggerSetStreamSink();

  @override
  int get hashCode => 0;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SendToDartLogger && runtimeType == other.runtimeType;
}
