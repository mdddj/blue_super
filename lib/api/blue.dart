// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:meta/meta.dart' as meta;
import 'package:uuid/uuid.dart';
part 'blue.freezed.dart';

// These functions are ignored because they are not marked as `pub`: `from`, `get_peripheral_with`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `clone`, `clone`, `clone`, `clone`, `clone`, `eq`, `eq`, `fmt`, `fmt`, `fmt`, `from`, `from`, `from`, `from`, `from`, `from`

///获取适配器
///
///
Future<List<BlueAdapter>> adapters() =>
    RustLib.instance.api.crateApiBlueAdapters();

///
///
Future<BlueAdapter> defaultAdapter() =>
    RustLib.instance.api.crateApiBlueDefaultAdapter();

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BPeripheral>>
abstract class BPeripheral implements RustOpaqueInterface {
  ///连接设备
  Future<void> connect();

  ///断开连接
  Future<void> disconnect();

  ///写入数据
  Future<void> write(
      {required BCharacteristic characteristic,
      required List<int> data,
      required BWriteType writeType});
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BlueAdapter>>
abstract class BlueAdapter implements RustOpaqueInterface {
  ///开始监听并搜索
  Stream<BlueEvent> listen();

  ///停止搜索
  ///适配器将被销毁,如果要重新扫描请新建一个适配器
  Future<void> stop();
}

enum BCentralState {
  unknown,
  poweredOn,
  poweredOff,
  ;
}

@freezed
@meta.immutable
sealed class BCharacteristic with _$BCharacteristic {
  const factory BCharacteristic({
    required UuidValue uuid,
    required UuidValue serviceUuid,
  }) = _BCharacteristic;
}

enum BWriteType {
  withResponse,
  withoutResponse,
  ;
}

@freezed
sealed class BlueEvent with _$BlueEvent {
  const BlueEvent._();

  const factory BlueEvent.deviceDiscovered(
    DevicePeripheralId field0,
  ) = BlueEvent_DeviceDiscovered;
  const factory BlueEvent.deviceUpdated(
    DevicePeripheralId field0,
  ) = BlueEvent_DeviceUpdated;
  const factory BlueEvent.deviceConnected(
    DevicePeripheralId field0,
  ) = BlueEvent_DeviceConnected;
  const factory BlueEvent.deviceDisconnected(
    DevicePeripheralId field0,
  ) = BlueEvent_DeviceDisconnected;
  const factory BlueEvent.manufacturerDataAdvertisement(
    DevicePeripheralId field0,
    Map<int, Uint8List> field1,
  ) = BlueEvent_ManufacturerDataAdvertisement;
  const factory BlueEvent.serviceDataAdvertisement(
    DevicePeripheralId field0,
    Map<UuidValue, Uint8List> field1,
  ) = BlueEvent_ServiceDataAdvertisement;
  const factory BlueEvent.servicesAdvertisement(
    DevicePeripheralId field0,
    List<UuidValue> field1,
  ) = BlueEvent_ServicesAdvertisement;
  const factory BlueEvent.stateUpdate(
    BCentralState field0,
  ) = BlueEvent_StateUpdate;
  const factory BlueEvent.error(
    String field0,
  ) = BlueEvent_ERROR;
}

///设备信息
@freezed
@meta.immutable
sealed class DevicePeripheralId with _$DevicePeripheralId {
  const DevicePeripheralId._();
  const factory DevicePeripheralId({
    String? name,
    required bool isConnected,
    required String address,
    int? txPowerLevel,
    int? rssi,
    required Map<int, Uint8List> manufacturerData,
    required Map<UuidValue, Uint8List> serviceData,
    required List<UuidValue> services,
    required BPeripheral peripheral,
  }) = _DevicePeripheralId;

  ///格式化设备信息
  Future<String> infosToString() =>
      RustLib.instance.api.crateApiBlueDevicePeripheralIdInfosToString(
        that: this,
      );
}
