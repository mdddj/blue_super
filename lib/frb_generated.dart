// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/blue.dart';
import 'api/log.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:meta/meta.dart' as meta;
import 'package:uuid/uuid.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => 757854830;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'blue_super',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiBlueBPeripheralConnect({required BPeripheral that});

  Future<void> crateApiBlueBPeripheralDisconnect({required BPeripheral that});

  Future<void> crateApiBlueBPeripheralWrite(
      {required BPeripheral that,
      required BCharacteristic characteristic,
      required List<int> data,
      required BWriteType writeType});

  Stream<BlueEvent> crateApiBlueBlueAdapterListen({required BlueAdapter that});

  Future<void> crateApiBlueBlueAdapterStop({required BlueAdapter that});

  Future<List<BlueAdapter>> crateApiBlueAdapters();

  Stream<LogEntry> crateApiLogCreateLogStream();

  Future<BlueAdapter> crateApiBlueDefaultAdapter();

  Future<String> crateApiBlueDevicePeripheralIdInfosToString(
      {required DevicePeripheralId that});

  Future<void> crateApiLogInitLogger();

  Future<MyMobileLogger> crateApiLogMyMobileLoggerNew();

  Future<void> crateApiLogRustSetUp();

  Future<SendToDartLogger> crateApiLogSendToDartLoggerNew();

  Stream<LogEntry> crateApiLogSendToDartLoggerSetStreamSink();

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BPeripheral;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BPeripheral;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_BPeripheralPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BlueAdapter;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BlueAdapter;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_BlueAdapterPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiBlueBPeripheralConnect({required BPeripheral that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
                that);
        return wire.wire__crate__api__blue__BPeripheral_connect(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBlueBPeripheralConnectConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBlueBPeripheralConnectConstMeta =>
      const TaskConstMeta(
        debugName: "BPeripheral_connect",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiBlueBPeripheralDisconnect({required BPeripheral that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
                that);
        return wire.wire__crate__api__blue__BPeripheral_disconnect(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBlueBPeripheralDisconnectConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBlueBPeripheralDisconnectConstMeta =>
      const TaskConstMeta(
        debugName: "BPeripheral_disconnect",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiBlueBPeripheralWrite(
      {required BPeripheral that,
      required BCharacteristic characteristic,
      required List<int> data,
      required BWriteType writeType}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
                that);
        var arg1 = cst_encode_box_autoadd_b_characteristic(characteristic);
        var arg2 = cst_encode_list_prim_u_8_loose(data);
        var arg3 = cst_encode_b_write_type(writeType);
        return wire.wire__crate__api__blue__BPeripheral_write(
            port_, arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBlueBPeripheralWriteConstMeta,
      argValues: [that, characteristic, data, writeType],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBlueBPeripheralWriteConstMeta =>
      const TaskConstMeta(
        debugName: "BPeripheral_write",
        argNames: ["that", "characteristic", "data", "writeType"],
      );

  @override
  Stream<BlueEvent> crateApiBlueBlueAdapterListen({required BlueAdapter that}) {
    final data = RustStreamSink<BlueEvent>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter(
                that);
        var arg1 = cst_encode_StreamSink_blue_event_Dco(data);
        return wire.wire__crate__api__blue__BlueAdapter_listen(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBlueBlueAdapterListenConstMeta,
      argValues: [that, data],
      apiImpl: this,
    )));
    return data.stream;
  }

  TaskConstMeta get kCrateApiBlueBlueAdapterListenConstMeta =>
      const TaskConstMeta(
        debugName: "BlueAdapter_listen",
        argNames: ["that", "data"],
      );

  @override
  Future<void> crateApiBlueBlueAdapterStop({required BlueAdapter that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter(
                that);
        return wire.wire__crate__api__blue__BlueAdapter_stop(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBlueBlueAdapterStopConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBlueBlueAdapterStopConstMeta =>
      const TaskConstMeta(
        debugName: "BlueAdapter_stop",
        argNames: ["that"],
      );

  @override
  Future<List<BlueAdapter>> crateApiBlueAdapters() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire__crate__api__blue__adapters(port_);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter,
        decodeErrorData: dco_decode_String,
      ),
      constMeta: kCrateApiBlueAdaptersConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBlueAdaptersConstMeta => const TaskConstMeta(
        debugName: "adapters",
        argNames: [],
      );

  @override
  Stream<LogEntry> crateApiLogCreateLogStream() {
    final s = RustStreamSink<LogEntry>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_StreamSink_log_entry_Dco(s);
        return wire.wire__crate__api__log__create_log_stream(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiLogCreateLogStreamConstMeta,
      argValues: [s],
      apiImpl: this,
    )));
    return s.stream;
  }

  TaskConstMeta get kCrateApiLogCreateLogStreamConstMeta => const TaskConstMeta(
        debugName: "create_log_stream",
        argNames: ["s"],
      );

  @override
  Future<BlueAdapter> crateApiBlueDefaultAdapter() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire__crate__api__blue__default_adapter(port_);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter,
        decodeErrorData: dco_decode_String,
      ),
      constMeta: kCrateApiBlueDefaultAdapterConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBlueDefaultAdapterConstMeta => const TaskConstMeta(
        debugName: "default_adapter",
        argNames: [],
      );

  @override
  Future<String> crateApiBlueDevicePeripheralIdInfosToString(
      {required DevicePeripheralId that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_device_peripheral_id(that);
        return wire
            .wire__crate__api__blue__device_peripheral_id_infos_to_string(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBlueDevicePeripheralIdInfosToStringConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBlueDevicePeripheralIdInfosToStringConstMeta =>
      const TaskConstMeta(
        debugName: "device_peripheral_id_infos_to_string",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiLogInitLogger() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire__crate__api__log__init_logger(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLogInitLoggerConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLogInitLoggerConstMeta => const TaskConstMeta(
        debugName: "init_logger",
        argNames: [],
      );

  @override
  Future<MyMobileLogger> crateApiLogMyMobileLoggerNew() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire__crate__api__log__my_mobile_logger_new(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_my_mobile_logger,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLogMyMobileLoggerNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLogMyMobileLoggerNewConstMeta =>
      const TaskConstMeta(
        debugName: "my_mobile_logger_new",
        argNames: [],
      );

  @override
  Future<void> crateApiLogRustSetUp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire__crate__api__log__rust_set_up(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLogRustSetUpConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLogRustSetUpConstMeta => const TaskConstMeta(
        debugName: "rust_set_up",
        argNames: [],
      );

  @override
  Future<SendToDartLogger> crateApiLogSendToDartLoggerNew() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire__crate__api__log__send_to_dart_logger_new(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_send_to_dart_logger,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLogSendToDartLoggerNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLogSendToDartLoggerNewConstMeta =>
      const TaskConstMeta(
        debugName: "send_to_dart_logger_new",
        argNames: [],
      );

  @override
  Stream<LogEntry> crateApiLogSendToDartLoggerSetStreamSink() {
    final streamSink = RustStreamSink<LogEntry>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_StreamSink_log_entry_Dco(streamSink);
        return wire.wire__crate__api__log__send_to_dart_logger_set_stream_sink(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLogSendToDartLoggerSetStreamSinkConstMeta,
      argValues: [streamSink],
      apiImpl: this,
    )));
    return streamSink.stream;
  }

  TaskConstMeta get kCrateApiLogSendToDartLoggerSetStreamSinkConstMeta =>
      const TaskConstMeta(
        debugName: "send_to_dart_logger_set_stream_sink",
        argNames: ["streamSink"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BPeripheral => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BPeripheral => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BlueAdapter => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BlueAdapter => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  BPeripheral
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
        raw);
  }

  @protected
  BPeripheral
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BPeripheralImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BlueAdapter
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BlueAdapterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BPeripheral
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BPeripheralImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BlueAdapter
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BlueAdapterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Map<UuidValue, Uint8List> dco_decode_Map_Uuid_list_prim_u_8_strict_None(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_uuid_list_prim_u_8_strict(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, Uint8List> dco_decode_Map_u_16_list_prim_u_8_strict_None(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_u_16_list_prim_u_8_strict(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  BPeripheral
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BPeripheralImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BlueAdapter
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BlueAdapterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<BlueEvent> dco_decode_StreamSink_blue_event_Dco(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<LogEntry> dco_decode_StreamSink_log_entry_Dco(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  UuidValue dco_decode_Uuid(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UuidValue.fromByteList(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  BCentralState dco_decode_b_central_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BCentralState.values[raw as int];
  }

  @protected
  BCharacteristic dco_decode_b_characteristic(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BCharacteristic(
      uuid: dco_decode_Uuid(arr[0]),
      serviceUuid: dco_decode_Uuid(arr[1]),
    );
  }

  @protected
  BWriteType dco_decode_b_write_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BWriteType.values[raw as int];
  }

  @protected
  BlueEvent dco_decode_blue_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return BlueEvent_DeviceDiscovered(
          dco_decode_box_autoadd_device_peripheral_id(raw[1]),
        );
      case 1:
        return BlueEvent_DeviceUpdated(
          dco_decode_box_autoadd_device_peripheral_id(raw[1]),
        );
      case 2:
        return BlueEvent_DeviceConnected(
          dco_decode_box_autoadd_device_peripheral_id(raw[1]),
        );
      case 3:
        return BlueEvent_DeviceDisconnected(
          dco_decode_box_autoadd_device_peripheral_id(raw[1]),
        );
      case 4:
        return BlueEvent_ManufacturerDataAdvertisement(
          dco_decode_box_autoadd_device_peripheral_id(raw[1]),
          dco_decode_Map_u_16_list_prim_u_8_strict_None(raw[2]),
        );
      case 5:
        return BlueEvent_ServiceDataAdvertisement(
          dco_decode_box_autoadd_device_peripheral_id(raw[1]),
          dco_decode_Map_Uuid_list_prim_u_8_strict_None(raw[2]),
        );
      case 6:
        return BlueEvent_ServicesAdvertisement(
          dco_decode_box_autoadd_device_peripheral_id(raw[1]),
          dco_decode_list_Uuid(raw[2]),
        );
      case 7:
        return BlueEvent_StateUpdate(
          dco_decode_b_central_state(raw[1]),
        );
      case 8:
        return BlueEvent_ERROR(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  BCharacteristic dco_decode_box_autoadd_b_characteristic(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_b_characteristic(raw);
  }

  @protected
  DevicePeripheralId dco_decode_box_autoadd_device_peripheral_id(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_device_peripheral_id(raw);
  }

  @protected
  int dco_decode_box_autoadd_i_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  DevicePeripheralId dco_decode_device_peripheral_id(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return DevicePeripheralId(
      name: dco_decode_opt_String(arr[0]),
      isConnected: dco_decode_bool(arr[1]),
      address: dco_decode_String(arr[2]),
      txPowerLevel: dco_decode_opt_box_autoadd_i_16(arr[3]),
      rssi: dco_decode_opt_box_autoadd_i_16(arr[4]),
      manufacturerData: dco_decode_Map_u_16_list_prim_u_8_strict_None(arr[5]),
      serviceData: dco_decode_Map_Uuid_list_prim_u_8_strict_None(arr[6]),
      services: dco_decode_list_Uuid(arr[7]),
      peripheral:
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
              arr[8]),
    );
  }

  @protected
  int dco_decode_i_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<BlueAdapter>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter)
        .toList();
  }

  @protected
  List<UuidValue> dco_decode_list_Uuid(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    const kUuidSizeInBytes = 16;
    final bytes = dco_decode_list_prim_u_8_strict(raw);
    return List.generate(
      bytes.lengthInBytes ~/ kUuidSizeInBytes,
      (i) => UuidValue.fromByteList(
          Uint8List.view(bytes.buffer, i * kUuidSizeInBytes, kUuidSizeInBytes)),
      growable: false,
    );
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(int, Uint8List)> dco_decode_list_record_u_16_list_prim_u_8_strict(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_u_16_list_prim_u_8_strict)
        .toList();
  }

  @protected
  List<(UuidValue, Uint8List)> dco_decode_list_record_uuid_list_prim_u_8_strict(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_uuid_list_prim_u_8_strict)
        .toList();
  }

  @protected
  LogEntry dco_decode_log_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return LogEntry(
      timeMillis: dco_decode_i_64(arr[0]),
      level: dco_decode_i_32(arr[1]),
      tag: dco_decode_String(arr[2]),
      msg: dco_decode_String(arr[3]),
    );
  }

  @protected
  MyMobileLogger dco_decode_my_mobile_logger(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.isNotEmpty)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return const MyMobileLogger();
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_i_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_16(raw);
  }

  @protected
  (int, Uint8List) dco_decode_record_u_16_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_u_16(arr[0]),
      dco_decode_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  (UuidValue, Uint8List) dco_decode_record_uuid_list_prim_u_8_strict(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Uuid(arr[0]),
      dco_decode_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  SendToDartLogger dco_decode_send_to_dart_logger(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.isNotEmpty)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return const SendToDartLogger();
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  BPeripheral
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
            deserializer);
    return inner;
  }

  @protected
  BPeripheral
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BPeripheralImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BlueAdapter
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BlueAdapterImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BPeripheral
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BPeripheralImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BlueAdapter
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BlueAdapterImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Map<UuidValue, Uint8List> sse_decode_Map_Uuid_list_prim_u_8_strict_None(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_uuid_list_prim_u_8_strict(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, Uint8List> sse_decode_Map_u_16_list_prim_u_8_strict_None(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_u_16_list_prim_u_8_strict(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  BPeripheral
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BPeripheralImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BlueAdapter
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BlueAdapterImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<BlueEvent> sse_decode_StreamSink_blue_event_Dco(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<LogEntry> sse_decode_StreamSink_log_entry_Dco(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  UuidValue sse_decode_Uuid(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return UuidValue.fromByteList(inner);
  }

  @protected
  BCentralState sse_decode_b_central_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return BCentralState.values[inner];
  }

  @protected
  BCharacteristic sse_decode_b_characteristic(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_uuid = sse_decode_Uuid(deserializer);
    var var_serviceUuid = sse_decode_Uuid(deserializer);
    return BCharacteristic(uuid: var_uuid, serviceUuid: var_serviceUuid);
  }

  @protected
  BWriteType sse_decode_b_write_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return BWriteType.values[inner];
  }

  @protected
  BlueEvent sse_decode_blue_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_box_autoadd_device_peripheral_id(deserializer);
        return BlueEvent_DeviceDiscovered(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_device_peripheral_id(deserializer);
        return BlueEvent_DeviceUpdated(var_field0);
      case 2:
        var var_field0 =
            sse_decode_box_autoadd_device_peripheral_id(deserializer);
        return BlueEvent_DeviceConnected(var_field0);
      case 3:
        var var_field0 =
            sse_decode_box_autoadd_device_peripheral_id(deserializer);
        return BlueEvent_DeviceDisconnected(var_field0);
      case 4:
        var var_field0 =
            sse_decode_box_autoadd_device_peripheral_id(deserializer);
        var var_field1 =
            sse_decode_Map_u_16_list_prim_u_8_strict_None(deserializer);
        return BlueEvent_ManufacturerDataAdvertisement(var_field0, var_field1);
      case 5:
        var var_field0 =
            sse_decode_box_autoadd_device_peripheral_id(deserializer);
        var var_field1 =
            sse_decode_Map_Uuid_list_prim_u_8_strict_None(deserializer);
        return BlueEvent_ServiceDataAdvertisement(var_field0, var_field1);
      case 6:
        var var_field0 =
            sse_decode_box_autoadd_device_peripheral_id(deserializer);
        var var_field1 = sse_decode_list_Uuid(deserializer);
        return BlueEvent_ServicesAdvertisement(var_field0, var_field1);
      case 7:
        var var_field0 = sse_decode_b_central_state(deserializer);
        return BlueEvent_StateUpdate(var_field0);
      case 8:
        var var_field0 = sse_decode_String(deserializer);
        return BlueEvent_ERROR(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  BCharacteristic sse_decode_box_autoadd_b_characteristic(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_b_characteristic(deserializer));
  }

  @protected
  DevicePeripheralId sse_decode_box_autoadd_device_peripheral_id(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_device_peripheral_id(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_i_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_16(deserializer));
  }

  @protected
  DevicePeripheralId sse_decode_device_peripheral_id(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_opt_String(deserializer);
    var var_isConnected = sse_decode_bool(deserializer);
    var var_address = sse_decode_String(deserializer);
    var var_txPowerLevel = sse_decode_opt_box_autoadd_i_16(deserializer);
    var var_rssi = sse_decode_opt_box_autoadd_i_16(deserializer);
    var var_manufacturerData =
        sse_decode_Map_u_16_list_prim_u_8_strict_None(deserializer);
    var var_serviceData =
        sse_decode_Map_Uuid_list_prim_u_8_strict_None(deserializer);
    var var_services = sse_decode_list_Uuid(deserializer);
    var var_peripheral =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
            deserializer);
    return DevicePeripheralId(
        name: var_name,
        isConnected: var_isConnected,
        address: var_address,
        txPowerLevel: var_txPowerLevel,
        rssi: var_rssi,
        manufacturerData: var_manufacturerData,
        serviceData: var_serviceData,
        services: var_services,
        peripheral: var_peripheral);
  }

  @protected
  int sse_decode_i_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt16();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<BlueAdapter>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BlueAdapter>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<UuidValue> sse_decode_list_Uuid(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UuidValue>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_Uuid(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(int, Uint8List)> sse_decode_list_record_u_16_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, Uint8List)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_u_16_list_prim_u_8_strict(deserializer));
    }
    return ans_;
  }

  @protected
  List<(UuidValue, Uint8List)> sse_decode_list_record_uuid_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(UuidValue, Uint8List)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_uuid_list_prim_u_8_strict(deserializer));
    }
    return ans_;
  }

  @protected
  LogEntry sse_decode_log_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_timeMillis = sse_decode_i_64(deserializer);
    var var_level = sse_decode_i_32(deserializer);
    var var_tag = sse_decode_String(deserializer);
    var var_msg = sse_decode_String(deserializer);
    return LogEntry(
        timeMillis: var_timeMillis,
        level: var_level,
        tag: var_tag,
        msg: var_msg);
  }

  @protected
  MyMobileLogger sse_decode_my_mobile_logger(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return const MyMobileLogger();
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_i_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_16(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (int, Uint8List) sse_decode_record_u_16_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_16(deserializer);
    var var_field1 = sse_decode_list_prim_u_8_strict(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (UuidValue, Uint8List) sse_decode_record_uuid_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_Uuid(deserializer);
    var var_field1 = sse_decode_list_prim_u_8_strict(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  SendToDartLogger sse_decode_send_to_dart_logger(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return const SendToDartLogger();
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
      BPeripheral raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as BPeripheralImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter(
      BlueAdapter raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as BlueAdapterImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
      BPeripheral raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as BPeripheralImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter(
      BlueAdapter raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as BlueAdapterImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
      BPeripheral raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as BPeripheralImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter(
      BlueAdapter raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as BlueAdapterImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_b_central_state(BCentralState raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_b_write_type(BWriteType raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_i_32(raw.index);
  }

  @protected
  bool cst_encode_bool(bool raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_i_16(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_i_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_u_16(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_u_8(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
          BPeripheral self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
        self, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
          BPeripheral self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BPeripheralImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter(
          BlueAdapter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BlueAdapterImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
          BPeripheral self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BPeripheralImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter(
          BlueAdapter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BlueAdapterImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void sse_encode_Map_Uuid_list_prim_u_8_strict_None(
      Map<UuidValue, Uint8List> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_uuid_list_prim_u_8_strict(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_u_16_list_prim_u_8_strict_None(
      Map<int, Uint8List> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_u_16_list_prim_u_8_strict(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
          BPeripheral self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BPeripheralImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter(
          BlueAdapter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BlueAdapterImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_StreamSink_blue_event_Dco(
      RustStreamSink<BlueEvent> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: DcoCodec(
          decodeSuccessData: dco_decode_blue_event,
          decodeErrorData: dco_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_log_entry_Dco(
      RustStreamSink<LogEntry> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: DcoCodec(
          decodeSuccessData: dco_decode_log_entry,
          decodeErrorData: dco_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_Uuid(UuidValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.toBytes(), serializer);
  }

  @protected
  void sse_encode_b_central_state(
      BCentralState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_b_characteristic(
      BCharacteristic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.uuid, serializer);
    sse_encode_Uuid(self.serviceUuid, serializer);
  }

  @protected
  void sse_encode_b_write_type(BWriteType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_blue_event(BlueEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case BlueEvent_DeviceDiscovered(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_device_peripheral_id(field0, serializer);
      case BlueEvent_DeviceUpdated(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_device_peripheral_id(field0, serializer);
      case BlueEvent_DeviceConnected(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_device_peripheral_id(field0, serializer);
      case BlueEvent_DeviceDisconnected(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_box_autoadd_device_peripheral_id(field0, serializer);
      case BlueEvent_ManufacturerDataAdvertisement(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(4, serializer);
        sse_encode_box_autoadd_device_peripheral_id(field0, serializer);
        sse_encode_Map_u_16_list_prim_u_8_strict_None(field1, serializer);
      case BlueEvent_ServiceDataAdvertisement(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(5, serializer);
        sse_encode_box_autoadd_device_peripheral_id(field0, serializer);
        sse_encode_Map_Uuid_list_prim_u_8_strict_None(field1, serializer);
      case BlueEvent_ServicesAdvertisement(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(6, serializer);
        sse_encode_box_autoadd_device_peripheral_id(field0, serializer);
        sse_encode_list_Uuid(field1, serializer);
      case BlueEvent_StateUpdate(field0: final field0):
        sse_encode_i_32(7, serializer);
        sse_encode_b_central_state(field0, serializer);
      case BlueEvent_ERROR(field0: final field0):
        sse_encode_i_32(8, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_b_characteristic(
      BCharacteristic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_b_characteristic(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_device_peripheral_id(
      DevicePeripheralId self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_device_peripheral_id(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_16(self, serializer);
  }

  @protected
  void sse_encode_device_peripheral_id(
      DevicePeripheralId self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.name, serializer);
    sse_encode_bool(self.isConnected, serializer);
    sse_encode_String(self.address, serializer);
    sse_encode_opt_box_autoadd_i_16(self.txPowerLevel, serializer);
    sse_encode_opt_box_autoadd_i_16(self.rssi, serializer);
    sse_encode_Map_u_16_list_prim_u_8_strict_None(
        self.manufacturerData, serializer);
    sse_encode_Map_Uuid_list_prim_u_8_strict_None(self.serviceData, serializer);
    sse_encode_list_Uuid(self.services, serializer);
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBPeripheral(
        self.peripheral, serializer);
  }

  @protected
  void sse_encode_i_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt16(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter(
          List<BlueAdapter> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBlueAdapter(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_Uuid(List<UuidValue> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Uuid(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_u_16_list_prim_u_8_strict(
      List<(int, Uint8List)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_u_16_list_prim_u_8_strict(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_uuid_list_prim_u_8_strict(
      List<(UuidValue, Uint8List)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_uuid_list_prim_u_8_strict(item, serializer);
    }
  }

  @protected
  void sse_encode_log_entry(LogEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.timeMillis, serializer);
    sse_encode_i_32(self.level, serializer);
    sse_encode_String(self.tag, serializer);
    sse_encode_String(self.msg, serializer);
  }

  @protected
  void sse_encode_my_mobile_logger(
      MyMobileLogger self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_16(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_16(self, serializer);
    }
  }

  @protected
  void sse_encode_record_u_16_list_prim_u_8_strict(
      (int, Uint8List) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_16(self.$1, serializer);
    sse_encode_list_prim_u_8_strict(self.$2, serializer);
  }

  @protected
  void sse_encode_record_uuid_list_prim_u_8_strict(
      (UuidValue, Uint8List) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.$1, serializer);
    sse_encode_list_prim_u_8_strict(self.$2, serializer);
  }

  @protected
  void sse_encode_send_to_dart_logger(
      SendToDartLogger self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class BPeripheralImpl extends RustOpaque implements BPeripheral {
  // Not to be used by end users
  BPeripheralImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BPeripheralImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_BPeripheral,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_BPeripheral,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_BPeripheralPtr,
  );

  ///连接设备
  Future<void> connect() => RustLib.instance.api.crateApiBlueBPeripheralConnect(
        that: this,
      );

  ///断开连接
  Future<void> disconnect() =>
      RustLib.instance.api.crateApiBlueBPeripheralDisconnect(
        that: this,
      );

  ///写入数据
  Future<void> write(
          {required BCharacteristic characteristic,
          required List<int> data,
          required BWriteType writeType}) =>
      RustLib.instance.api.crateApiBlueBPeripheralWrite(
          that: this,
          characteristic: characteristic,
          data: data,
          writeType: writeType);
}

@sealed
class BlueAdapterImpl extends RustOpaque implements BlueAdapter {
  // Not to be used by end users
  BlueAdapterImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BlueAdapterImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_BlueAdapter,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_BlueAdapter,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_BlueAdapterPtr,
  );

  ///开始监听并搜索
  Stream<BlueEvent> listen() =>
      RustLib.instance.api.crateApiBlueBlueAdapterListen(
        that: this,
      );

  ///停止搜索
  ///适配器将被销毁,如果要重新扫描请新建一个适配器
  Future<void> stop() => RustLib.instance.api.crateApiBlueBlueAdapterStop(
        that: this,
      );
}
